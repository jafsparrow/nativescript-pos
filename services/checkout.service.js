"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var CheckOutService = (function () {
    function CheckOutService() {
        this.lineItems = [];
    }
    CheckOutService.prototype.addProductToCart = function (product, quantity) {
        console.log("product name is " + product.name + " and quantitiy is " + quantity);
        var lineItem = Object.assign({}, product);
        lineItem.id = product.id;
        lineItem.quantity = quantity;
        lineItem.totalPrice = product.price * quantity;
        var index = this.lineItems.findIndex(function (item) {
            return item.id === product.id;
        });
        if (index > -1) {
            // edit the current item .
            this.lineItems[index].quantity = quantity;
            this.lineItems[index].totalPrice = quantity * product.price;
        }
        else {
            this.lineItems.push(lineItem);
        }
        console.log("the length now is " + this.lineItems.length);
        console.log(this.lineItems);
    };
    CheckOutService.prototype.removeProductFromCart = function (product) {
        // const index = this.lineItems.indexOf(product);
        var filteredItems = this.lineItems.filter(function (item) {
            return item.id !== product.id;
        });
        this.lineItems = filteredItems;
    };
    CheckOutService.prototype.changeProdcutQuantity = function (product, newQuantity) {
        var lineItem = Object.assign({}, product);
        lineItem.quantity = newQuantity;
        lineItem.totalPrice = product.price * newQuantity;
        var index = this.lineItems.findIndex(function (item) {
            return item.product.id === product.id;
        });
        Object.assign(this.lineItems[index], lineItem);
    };
    CheckOutService.prototype.editProductFromCart = function (product) {
    };
    CheckOutService.prototype.getTheCartProductCount = function () {
        return this.lineItems.length;
    };
    CheckOutService.prototype.getTheCart = function () {
        return this.lineItems;
    };
    CheckOutService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], CheckOutService);
    return CheckOutService;
}());
exports.CheckOutService = CheckOutService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tvdXQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNoZWNrb3V0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBMkM7QUFNM0M7SUFJSTtRQUNFLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFJRCwwQ0FBZ0IsR0FBaEIsVUFBaUIsT0FBWSxFQUFFLFFBQWdCO1FBRTdDLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQW1CLE9BQU8sQ0FBQyxJQUFJLDBCQUFxQixRQUFVLENBQUMsQ0FBQztRQUM1RSxJQUFNLFFBQVEsR0FBYSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN0RCxRQUFRLENBQUMsRUFBRSxHQUFHLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDekIsUUFBUSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDN0IsUUFBUSxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQztRQUMvQyxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBRSxVQUFDLElBQUk7WUFDMUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssT0FBTyxDQUFDLEVBQUUsQ0FBQTtRQUNoQyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDZCwwQkFBMEI7WUFDMUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1lBQzFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsVUFBVSxHQUFHLFFBQVEsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBRTlELENBQUM7UUFBQSxJQUFJLENBQUMsQ0FBQztZQUNMLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2hDLENBQUM7UUFJRCxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUFxQixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQVEsQ0FBQyxDQUFDO1FBQzFELE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRCwrQ0FBcUIsR0FBckIsVUFBc0IsT0FBWTtRQUNoQyxpREFBaUQ7UUFDakQsSUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsVUFBQSxJQUFJO1lBQzlDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDaEMsQ0FBQyxDQUFDLENBQUE7UUFFRixJQUFJLENBQUMsU0FBUyxHQUFHLGFBQWEsQ0FBQztJQUNqQyxDQUFDO0lBRUQsK0NBQXFCLEdBQXJCLFVBQXNCLE9BQVksRUFBRSxXQUFtQjtRQUNyRCxJQUFNLFFBQVEsR0FBYSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN0RCxRQUFRLENBQUMsUUFBUSxHQUFHLFdBQVcsQ0FBQztRQUNoQyxRQUFRLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDO1FBRWxELElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFFLFVBQUEsSUFBSTtZQUMxQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEtBQUssT0FBTyxDQUFDLEVBQUUsQ0FBQTtRQUN2QyxDQUFDLENBQUMsQ0FBQztRQUNILE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUVqRCxDQUFDO0lBRUQsNkNBQW1CLEdBQW5CLFVBQW9CLE9BQVk7SUFFaEMsQ0FBQztJQUdELGdEQUFzQixHQUF0QjtRQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztJQUMvQixDQUFDO0lBRUQsb0NBQVUsR0FBVjtRQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7SUFwRVEsZUFBZTtRQUQzQixpQkFBVSxFQUFFOztPQUNBLGVBQWUsQ0E2SDNCO0lBQUQsc0JBQUM7Q0FBQSxBQTdIRCxJQTZIQztBQTdIWSwwQ0FBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IFByb2R1Y3QgfSBmcm9tICcuL3Byb2R1Y3QnO1xyXG5pbXBvcnQgeyBMaW5lSXRlbSB9IGZyb20gJy4vbGluZS1pdGVtJztcclxuaW1wb3J0IHsgT3JkZXIgfSBmcm9tICcuL29yZGVyJ1xyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBDaGVja091dFNlcnZpY2Uge1xyXG4gICAgXHJcbiAgICBsaW5lSXRlbXM6IExpbmVJdGVtW107XHJcbiAgXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgdGhpcy5saW5lSXRlbXMgPSBbXTtcclxuICAgIH1cclxuICBcclxuXHJcbiAgXHJcbiAgICBhZGRQcm9kdWN0VG9DYXJ0KHByb2R1Y3Q6IGFueSwgcXVhbnRpdHk6IG51bWJlcikge1xyXG5cclxuICAgICAgY29uc29sZS5sb2coYHByb2R1Y3QgbmFtZSBpcyAke3Byb2R1Y3QubmFtZX0gYW5kIHF1YW50aXRpeSBpcyAke3F1YW50aXR5fWApO1xyXG4gICAgICBjb25zdCBsaW5lSXRlbTogTGluZUl0ZW0gPSBPYmplY3QuYXNzaWduKHt9LCBwcm9kdWN0KTtcclxuICAgICAgbGluZUl0ZW0uaWQgPSBwcm9kdWN0LmlkO1xyXG4gICAgICBsaW5lSXRlbS5xdWFudGl0eSA9IHF1YW50aXR5O1xyXG4gICAgICBsaW5lSXRlbS50b3RhbFByaWNlID0gcHJvZHVjdC5wcmljZSAqIHF1YW50aXR5O1xyXG4gICAgICBjb25zdCBpbmRleCA9IHRoaXMubGluZUl0ZW1zLmZpbmRJbmRleCggKGl0ZW0pID0+IHtcclxuICAgICAgICAgcmV0dXJuIGl0ZW0uaWQgPT09IHByb2R1Y3QuaWRcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBpZihpbmRleCA+IC0xKSB7XHJcbiAgICAgICAgLy8gZWRpdCB0aGUgY3VycmVudCBpdGVtIC5cclxuICAgICAgICB0aGlzLmxpbmVJdGVtc1tpbmRleF0ucXVhbnRpdHkgPSBxdWFudGl0eTtcclxuICAgICAgICB0aGlzLmxpbmVJdGVtc1tpbmRleF0udG90YWxQcmljZSA9IHF1YW50aXR5ICogcHJvZHVjdC5wcmljZTtcclxuICBcclxuICAgICAgfWVsc2Uge1xyXG4gICAgICAgIHRoaXMubGluZUl0ZW1zLnB1c2gobGluZUl0ZW0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBcclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKGB0aGUgbGVuZ3RoIG5vdyBpcyAke3RoaXMubGluZUl0ZW1zLmxlbmd0aH1gKTtcclxuICAgICAgY29uc29sZS5sb2codGhpcy5saW5lSXRlbXMpO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgcmVtb3ZlUHJvZHVjdEZyb21DYXJ0KHByb2R1Y3Q6IGFueSkge1xyXG4gICAgICAvLyBjb25zdCBpbmRleCA9IHRoaXMubGluZUl0ZW1zLmluZGV4T2YocHJvZHVjdCk7XHJcbiAgICAgIGNvbnN0IGZpbHRlcmVkSXRlbXMgPSB0aGlzLmxpbmVJdGVtcy5maWx0ZXIoaXRlbSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGl0ZW0uaWQgIT09IHByb2R1Y3QuaWQ7XHJcbiAgICAgIH0pXHJcbiAgXHJcbiAgICAgIHRoaXMubGluZUl0ZW1zID0gZmlsdGVyZWRJdGVtcztcclxuICAgIH1cclxuICBcclxuICAgIGNoYW5nZVByb2RjdXRRdWFudGl0eShwcm9kdWN0OiBhbnksIG5ld1F1YW50aXR5OiBudW1iZXIpIHtcclxuICAgICAgY29uc3QgbGluZUl0ZW06IExpbmVJdGVtID0gT2JqZWN0LmFzc2lnbih7fSwgcHJvZHVjdCk7XHJcbiAgICAgIGxpbmVJdGVtLnF1YW50aXR5ID0gbmV3UXVhbnRpdHk7XHJcbiAgICAgIGxpbmVJdGVtLnRvdGFsUHJpY2UgPSBwcm9kdWN0LnByaWNlICogbmV3UXVhbnRpdHk7XHJcbiAgXHJcbiAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5saW5lSXRlbXMuZmluZEluZGV4KCBpdGVtID0+IHtcclxuICAgICAgICByZXR1cm4gaXRlbS5wcm9kdWN0LmlkID09PSBwcm9kdWN0LmlkXHJcbiAgICAgIH0pO1xyXG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMubGluZUl0ZW1zW2luZGV4XSwgbGluZUl0ZW0pO1xyXG4gIFxyXG4gICAgfVxyXG4gIFxyXG4gICAgZWRpdFByb2R1Y3RGcm9tQ2FydChwcm9kdWN0OiBhbnkpIHtcclxuICBcclxuICAgIH1cclxuXHJcbiAgICBcclxuICAgIGdldFRoZUNhcnRQcm9kdWN0Q291bnQoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMubGluZUl0ZW1zLmxlbmd0aDtcclxuICAgIH0gICAgXHJcblxyXG4gICAgZ2V0VGhlQ2FydCgpIHtcclxuICAgICAgcmV0dXJuIHRoaXMubGluZUl0ZW1zO1xyXG4gICAgfVxyXG5cclxuLy8gICAgIHByaXZhdGUgb3JkZXJOdW1iZXI6IG51bWJlcjtcclxuLy8gICAgIHB1YmxpYyBvcmRlckRldGFpbDogT3JkZXI7XHJcbi8vICAgICBwdWJsaWMgbGluZUl0ZW1zOiBBcnJheTxMaW5lSXRlbT47XHJcbi8vICAgICBjb25zdHJ1Y3RvcigpIHtcclxuLy8gICAgICAgICB0aGlzLm9yZGVyTnVtYmVyID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjApO1xyXG4vLyAgICAgICAgIHRoaXMubGluZUl0ZW1zID0gW107XHJcbiAgICAgICAgXHJcbi8vICAgICB9XHJcblxyXG5cclxuLy8gYWRkUHJvZHVjdFRvTGluZUl0ZW1zKHByb2R1Y3Q6IFByb2R1Y3QsIHF1YW50aXR5OiBudW1iZXIpIHtcclxuLy8gICAgIGxldCBuZXdMaW5lSXRlbTogTGluZUl0ZW0gPSB0aGlzLmNyZWF0ZU5ld0xpbmVJdGVtKHByb2R1Y3QsIHF1YW50aXR5KTtcclxuLy8gICAgIHRoaXMuYWRkTGluZUl0ZW0obmV3TGluZUl0ZW0pO1xyXG4vLyB9XHJcblxyXG4vLyBhZGRMaW5lSXRlbShpdGVtOiBMaW5lSXRlbSkge1xyXG4vLyAgICAgdGhpcy5saW5lSXRlbXMucHVzaChpdGVtKTtcclxuLy8gfVxyXG5cclxuXHJcbi8vIGNyZWF0ZU5ld0xpbmVJdGVtKHByb2R1Y3Q6IFByb2R1Y3QsIHF1YW50aXR5OiBudW1iZXIpOiBMaW5lSXRlbSB7XHJcbi8vICAgICBjb25zdCB0b3RhbDogYW55ID0gcHJvZHVjdC5wcmljZSAqIHF1YW50aXR5O1xyXG4vLyAgICAgbGV0IGxpbmVJdGVtOiBMaW5lSXRlbSA9IHtcclxuLy8gICAgICAgICBpZDogcHJvZHVjdC5pZCxcclxuLy8gICAgICAgICBxdWFudGl0eTogcXVhbnRpdHksXHJcbi8vICAgICAgICAgcHJpY2U6IHByb2R1Y3QucHJpY2UsXHJcbi8vICAgICAgICAgdG90YWw6IHRvdGFsLFxyXG4vLyAgICAgfVxyXG4vLyAgICAgcmV0dXJuIGxpbmVJdGVtO1xyXG4vLyAgIH1cclxuXHJcbi8vICAgY3JlYXRlT3JkZXIobGluZUl0ZW1zOiBBcnJheTxMaW5lSXRlbT4pIHtcclxuLy8gICAgIHRoaXMub3JkZXJEZXRhaWwgPSBuZXcgT3JkZXIodGhpcy5vcmRlck51bWJlciwgdGhpcy5saW5lSXRlbXMpO1xyXG4vLyAgICAgdGhpcy5vcmRlckRldGFpbC50b3RhbCA9IHRoaXMuZ2V0VG90YWxQcmljZShsaW5lSXRlbXMpO1xyXG4vLyAgICAgdGhpcy5vcmRlckRldGFpbC5jcmVhdGVkX2F0ID0gbmV3IERhdGUoKTtcclxuLy8gICAgIHRoaXMub3JkZXJEZXRhaWwudG90YWxfcXVhbnRpdHkgPSB0aGlzLmdldFRvdGFsUXVhbnRpdHkobGluZUl0ZW1zKTtcclxuICAgIFxyXG5cclxuLy8gICB9XHJcblxyXG4vLyAgIGdldFRvdGFsUHJpY2UobGluZUl0ZW1zOiBBcnJheTxMaW5lSXRlbT4pOiBudW1iZXIge1xyXG4vLyAgICAgbGV0IHRvdGFsUHJpY2UgPSAwOyBcclxuLy8gICAgIGxpbmVJdGVtcy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pe1xyXG4vLyAgICAgICAgIHRvdGFsUHJpY2UgPSB0b3RhbFByaWNlICsgaXRlbS5wcmljZTtcclxuLy8gICAgIH0pXHJcbi8vICAgICByZXR1cm4gdG90YWxQcmljZTtcclxuLy8gICB9XHJcblxyXG4vLyAgICAgZ2V0VG90YWxRdWFudGl0eShsaW5lSXRlbXM6IEFycmF5PExpbmVJdGVtPik6IG51bWJlciB7XHJcbi8vICAgICAgICAgbGV0IHRvdGFsUXVhbnRpdHkgPSAwOyBcclxuLy8gICAgICAgICBsaW5lSXRlbXMuZm9yRWFjaChmdW5jdGlvbihpdGVtKXtcclxuLy8gICAgICAgICAgICAgdG90YWxRdWFudGl0eSA9IHRvdGFsUXVhbnRpdHkgKyBpdGVtLnF1YW50aXR5O1xyXG4vLyAgICAgICAgIH0pXHJcbi8vICAgICAgICAgcmV0dXJuIHRvdGFsUXVhbnRpdHk7XHJcbi8vICAgfVxyXG59Il19